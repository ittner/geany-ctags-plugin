#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# WAF build script for geany plugin GeanyLaTeX
#
# Copyright 2008-2009 Enrico Tr√∂ger <enrico(dot)troeger(at)uvena(dot)de>
# Copyright 2009 Frank Lanitz <frank(at)frank(dot)uvena(dot)de>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
#
# $Id$

"""
Waf build script for the Geany plugin GeanyLaTeX.


The code of this file itself loosely follows PEP 8 with some exceptions
(line width 100 characters and some other minor things).

Requires WAF 1.5.7 and Python 2.4 (or later).
"""


import glob
import os
import sys
import tempfile
import Build
import Options
import Utils
import preproc


APPNAME = 'geanylatex'
VERSION = '0.5dev'

srcdir = '.'
blddir = '_build_'



makefile_template = '''#!/usr/bin/make -f
# Waf Makefile wrapper

all:
	@./waf build

update-po:
	@./waf --update-po

install:
	@if test -n "$(DESTDIR)"; then \\
		./waf install --destdir="$(DESTDIR)"; \\
	else \\
		./waf install; \\
	fi;

uninstall:
	@if test -n "$(DESTDIR)"; then \\
		./waf uninstall --destdir="$(DESTDIR)"; \\
	else \\
		./waf uninstall; \\
	fi;

clean:
	@./waf clean

distclean:
	@./waf distclean

.PHONY: clean uninstall install all
'''


geanylatex_sources = [
	'src/bibtex.c','src/geanylatex.c','src/latexstructure.c',
	'src/bibtexlabels.c','src/latexencodings.c','src/latexutils.c',
	'src/formatpatterns.c','src/latexenvironments.c','src/letters.c',
	'src/formatutils.c','src/latexkeybindings.c','src/reftex.c',
	'src/templates.c']

def configure(conf):
	def in_git():
		cmd = 'git ls-files >/dev/null 2>&1'
		return (Utils.exec_command(cmd) == 0)

	def in_svn():
		return os.path.exists('.svn')

	def conf_get_svn_rev():
		# try GIT
		if in_git():
			cmds = [ 'git svn find-rev HEAD 2>/dev/null',
					 'git svn find-rev origin/trunk 2>/dev/null',
					 'git svn find-rev trunk 2>/dev/null',
					 'git svn find-rev master 2>/dev/null'
					]
			for c in cmds:
				try:
					stdout = Utils.cmd_output(c)
					if stdout:
						return stdout.strip()
				except:
					pass
		# check for svn
		elif in_svn():
			try:
				_env = None if is_win32 else {'LANG' : 'C'}
				stdout = Utils.cmd_output(cmd='svn info --non-interactive',
					     silent=True, env=_env)
				lines = stdout.splitlines(True)
				for line in lines:
					if line.startswith('Last Changed Rev'):
						key, value = line.split(': ', 1)
						return value.strip()
			except:
				pass
		else:
			pass
		return '-1'

	def set_lib_dir():
		# use the libdir specified on command line
		if Options.options.libdir:
			conf.define('LIBDIR', Options.options.libdir, 1)
		else:
			# get Geany's libdir (this should be the default case for most users)
			libdir = conf.check_cfg(package='geany', args='--variable=libdir')
			if libdir:
				conf.define('LIBDIR', libdir.strip(), 1)
			else:
				conf.define('LIBDIR', conf.env['PREFIX'] + '/lib', 1)

	def conf_define_from_opt(define_name, opt_name, default_value, quote=1):
		if opt_name:
			if isinstance(opt_name, bool):
				opt_name = 1
			conf.define(define_name, opt_name, quote)
		elif default_value:
			conf.define(define_name, default_value, quote)


	conf.check_tool('compiler_cc')
	is_win32 = target_is_win32(conf.env)

	# we don't require intltool on Windows (it would require Perl) though it works well
	try:
		conf.check_tool('intltool')
	except:
		pass

	if not is_win32:
		set_lib_dir()


	# GTK version check
	conf.check_cfg(package='gtk+-2.0', atleast_version='2.8.0',
		uselib_store='GTK', mandatory=True, args='--cflags --libs')
	gtk_version = conf.check_cfg(modversion='gtk+-2.0', uselib_store='GTK')

	# Checking for a 'good' geany
	conf.check_cfg(package='geany', atleast_version='0.18', mandatory=True, args='--cflags --libs')

	gtk_version = conf.check_cfg(modversion='gtk+-2.0') or 'Unknown'
	geany_version = conf.check_cfg(modversion='geany') or 'Unknown'

	# Windows specials
	if is_win32:
		if conf.env['PREFIX'] == tempfile.gettempdir():
			# overwrite default prefix on Windows (tempfile.gettempdir() is the Waf default)
			conf.define('PREFIX', os.path.join(conf.srcdir, '%s-%s' % (APPNAME, VERSION)), 1)
		# hack: we add the parent directory of the first include directory as this is missing in
		# list returned from pkg-config
		conf.env['CPPPATH_GTK'].insert(0, os.path.dirname(conf.env['CPPPATH_GTK'][0]))
		# we don't need -fPIC when compiling on or for Windows
		if '-fPIC' in conf.env['shlib_CCFLAGS']:
			conf.env['shlib_CCFLAGS'].remove('-fPIC')
		conf.env['shlib_PATTERN'] = '%s.dll'
	else:
		conf.env['shlib_PATTERN'] = '%s.so'

	svn_rev = conf_get_svn_rev()

	conf.define('REVISION', svn_rev, 1)
	if svn_rev > -1:
		conf.define('VERSION', VERSION + ' r' + svn_rev, 1)
	else:
		conf.define('VERSION', VERSION, 1)

	conf.env['G_PREFIX'] = conf.env['PREFIX']


	if is_win32:
		conf.define('PREFIX', '', 1)
		conf.define('LIBDIR', '', 1)
		conf.define('DOCDIR', 'doc', 1)
		conf.define('LOCALEDIR', 'share/locale', 1)
		# DATADIR is defined in objidl.h, so we remove it from config.h
		conf.undefine('DATADIR')
	else:
		conf.define('PREFIX', conf.env['PREFIX'], 1)
		conf.define('DOCDIR', '%s/doc/geany-plugins/' % conf.env['DATADIR'], 1)

	conf.define('PACKAGE', APPNAME, 1)
	conf.define('GETTEXT_PACKAGE', APPNAME, 1)
	conf.define('ENABLE_NLS', 1)
	conf.write_config_header('config.h')

	if is_win32: # overwrite LOCALEDIR to install message catalogues properly
		conf.env['LOCALEDIR'] = os.path.join(conf.env['G_PREFIX'], 'share/locale')

	Utils.pprint('BLUE', 'Summary:')
	print_message(conf, 'Install GeanyLatex ' + VERSION + ' in', conf.env['G_PREFIX'])
	print_message(conf, 'Using GTK version', gtk_version)
	print_message(conf, 'Using Geany version', geany_version)
	if svn_rev != '-1':
		print_message(conf, 'Compiling Subversion revision', svn_rev)
		conf.env.append_value('CCFLAGS', '-g -O0 -DDEBUG'.split()) # -DGEANY_DISABLE_DEPRECATED'

	conf.env.append_value('CCFLAGS', '-DHAVE_CONFIG_H'.split())

	# convenience script (script content copied from the original waf.bat)
	if is_win32:
		f = open('waf.bat', 'wb')
		f.write('@python -x %~dp0waf %* & exit /b')
		f.close
	# write a simple Makefile
	else:
		f = open('Makefile', 'w')
		f.write(makefile_template)
		f.close

def set_options(opt):
	opt.tool_options('compiler_cc')
	opt.tool_options('intltool')

	# Paths
	opt.add_option('--libdir', type='string', default='',
		help='object code libraries', dest='libdir')
	# Actions
	opt.add_option('--update-po', action='store_true', default=False,
		help='update the message catalogs for translation', dest='update_po')
	opt.add_option('--write-installer', action='store_true', default=False,
		help='create Windows installer (maintainer and Win32 only)', dest='write_installer')

def build(bld):
	is_win32 = target_is_win32(bld.env)

	def install_docs(bld, pname, files):
		ext = '.txt' if is_win32 else ''
		docdir = '${G_PREFIX}/doc/plugins/%s' % pname if is_win32 else '${DOCDIR}/%s' % pname
		for file in files:
			if os.path.exists(file):
				bld.install_as(
					'%s/%s%s' % (docdir, uc_first(file, is_win32), ext), file)
		bld.install_files('%s' % docdir, 'doc/geanylatex.tex')
		bld.install_files('%s' % docdir, 'doc/*.html')
		bld.install_files('%s' % docdir, 'doc/geanylatex.css')
		bld.install_files('%s' % docdir, 'doc/geanylatex.pdf')
		bld.install_files('%s/img' % docdir, 'doc/img/*.png')

	bld.new_task_gen(
		features		= 'cc cshlib',
		name			= 'geanylatex',
		target			= 'geanylatex',
		source			= geanylatex_sources,
		includes		= '. src/',
		uselib			= 'GTK GEANY',
		install_path	= '${G_PREFIX}/lib' if is_win32 else '${LIBDIR}/geany/'
	)

	install_docs(bld, 'geanylatex', 'AUTHORS ChangeLog COPYING NEWS README THANKS TODO'.split())

	# Translations
	if bld.env['INTLTOOL']:
		bld.new_task_gen(
			features		= 'intltool_po',
			podir			= 'po',
			install_path	= '${LOCALEDIR}',
			appname			= 'geanylatex'
		)

def shutdown():
	if Options.options.write_installer:
		do_sign = os.path.exists("sign.bat") # private file to sign the binary files, not needed
		def sign_binary(file):
			if do_sign:
				Utils.exec_command('sign.bat %s' % file)

		# strip all binaries
		Utils.pprint('CYAN', 'Stripping %sfiles' % ('and signing binary ' if do_sign else ''))
		files = glob.glob(os.path.join(Build.bld.env['G_PREFIX'], 'lib', '*.dll'))

	if Options.options.update_po:
		# the following code was taken from midori's WAF script, thanks
		potfile = '%s.pot' % (APPNAME)
		os.chdir('%s/po' % srcdir)
		try:
			try:
				size_old = os.stat(potfile).st_size
			except:
				size_old = 0
			Utils.exec_command('intltool-update --pot -g %s' % APPNAME)
			if os.stat(potfile).st_size != size_old:
				Utils.pprint('CYAN', 'Updated POT file.')
				launch('intltool-update -r -g %s' % APPNAME, 'Updating translations', 'CYAN')
			else:
				Utils.pprint('CYAN', 'POT file is up to date.')
		except:
			Utils.pprint('RED', 'Failed to generate pot file.')
		os.chdir('..')


# Simple function to execute a command and print its exit status
def launch(command, status, success_color='GREEN'):
	ret = 0
	Utils.pprint(success_color, status)
	try:
		ret = Utils.exec_command(command)
	except OSError, e:
		ret = 1
		print str(e), ":", command
	except:
		ret = 1

	if ret != 0:
		Utils.pprint('RED', status + ' failed')

	return ret


def print_message(conf, msg, result, color = 'GREEN'):
	conf.check_message_1(msg)
	conf.check_message_2(result, color)


def uc_first(s, is_win32):
	if is_win32:
		return s.title()
	return s


def target_is_win32(env):
	if sys.platform == 'win32':
		return True
	if env and 'CC' in env:
		cc = env['CC']
		if not isinstance(cc, str):
			cc = ''.join(cc)
		return cc.find('mingw') != -1
	return False


